substitutions:
  name: curatron-esp
  friendly_name: "Curatron ESP Humidity Sensor"
  comment: "ESP32-S3 DHT22 humidity/temperature sensor for curing chamber monitoring"
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  ota_pw: !secret ota_password
  api_key: !secret api_encryption_key

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  comment: ${comment}
  project:
    name: "curatron.humidity-sensor"
    version: "1.0.0"

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  framework:
    type: arduino
    version: latest
  # ESP32-S3 WROOM optimized settings

# Enable logging
logger:
  level: INFO
  baud_rate: 0  # Disable UART logging to prevent conflicts

# Enable Home Assistant API
api:
  encryption:
    key: ${api_key}
  reboot_timeout: 15min

ota:
  - platform: esphome
    password: ${ota_pw}

wifi:
  networks:
    - ssid: ${wifi_ssid}
      password: ${wifi_password}
      priority: 1.0
  
  # Compatibility settings for problematic routers
  fast_connect: false
  power_save_mode: none
  output_power: 8.5dB  # Minimum allowed power level
  
  # Connection timing adjustments
  reboot_timeout: 0s  # Disable reboot, let AP mode activate
  
  # Manual network configuration if DHCP fails
  # manual_ip:
  #   static_ip: 192.168.1.100
  #   gateway: 192.168.1.1
  #   subnet: 255.255.255.0
  #   dns1: 8.8.8.8
  
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Curatron-ESP-Fallback"
    password: "CuratronESP2024"
  
  # Connection event handlers
  on_connect:
    - delay: 2s
    - logger.log: "WiFi Connected Successfully!"
  on_disconnect:
    - delay: 10s
    - logger.log: "WiFi Disconnected - attempting reconnection"

captive_portal:

# DHT22 sensor on GPIO7
sensor:
  # DHT22 - Temperature and humidity sensor
  - platform: dht
    pin: GPIO7
    model: DHT22
    temperature:
      name: "Curatron Temperature"
      id: curatron_temp
      unit_of_measurement: "°C"
      accuracy_decimals: 1
      device_class: "temperature"
      state_class: "measurement"
      filters:
        - offset: 0.0  # Calibration offset if needed
    humidity:
      name: "Curatron Humidity"
      id: curatron_humidity
      unit_of_measurement: "%"
      accuracy_decimals: 1
      device_class: "humidity"
      state_class: "measurement"
      filters:
        - offset: 0.0  # Calibration offset if needed
    update_interval: 30s

  # ESP32-S3 internal temperature sensor (diagnostic)
  - platform: internal_temperature
    name: "Curatron ESP32-S3 Internal Temperature"
    id: esp32_internal_temp
    entity_category: diagnostic
    update_interval: 60s

  # VPD (Vapor Pressure Deficit) calculation
  - platform: template
    name: "Curatron VPD"
    id: curatron_vpd
    unit_of_measurement: "kPa"
    accuracy_decimals: 2
    device_class: "atmospheric_pressure"
    state_class: "measurement"
    update_interval: 60s
    lambda: |-
      if (id(curatron_temp).has_state() && id(curatron_humidity).has_state()) {
        float temp = id(curatron_temp).state;
        float humidity = id(curatron_humidity).state;
        
        // Calculate saturation vapor pressure (kPa)
        float svp = 0.6108 * exp((17.27 * temp) / (temp + 237.3));
        
        // Calculate actual vapor pressure
        float avp = svp * (humidity / 100.0);
        
        // Calculate VPD
        float vpd = svp - avp;
        
        return vpd;
      }
      return {};

  # Dew point calculation
  - platform: template
    name: "Curatron Dew Point"
    id: curatron_dew_point
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    device_class: "temperature"
    state_class: "measurement"
    update_interval: 60s
    lambda: |-
      if (id(curatron_temp).has_state() && id(curatron_humidity).has_state()) {
        float temp = id(curatron_temp).state;
        float humidity = id(curatron_humidity).state;
        
        // Magnus formula for dew point
        float a = 17.27;
        float b = 237.7;
        float alpha = ((a * temp) / (b + temp)) + log(humidity / 100.0);
        float dew_point = (b * alpha) / (a - alpha);
        
        return dew_point;
      }
      return {};

  # Absolute humidity calculation (g/m³)
  - platform: template
    name: "Curatron Absolute Humidity"
    id: curatron_absolute_humidity
    unit_of_measurement: "g/m³"
    accuracy_decimals: 2
    state_class: "measurement"
    update_interval: 60s
    lambda: |-
      if (id(curatron_temp).has_state() && id(curatron_humidity).has_state()) {
        float temp = id(curatron_temp).state;
        float rh = id(curatron_humidity).state;
        
        // Calculate absolute humidity for cold environment
        float svp = 0.6108 * exp((17.27 * temp) / (temp + 237.3));
        float avp = svp * (rh / 100.0);
        float absolute_humidity = (avp * 1000.0 * 18.016) / (8.314 * (temp + 273.15));
        
        return absolute_humidity;
      }
      return {};

  # WiFi signal strength
  - platform: wifi_signal
    name: "Curatron WiFi Signal"
    update_interval: 60s
    entity_category: diagnostic

  # Uptime sensor
  - platform: uptime
    name: "Curatron Uptime"
    entity_category: diagnostic

# Simplified binary sensors - let Home Assistant handle the logic
# (Removed complex automation alerts)

# Text sensors for status information
text_sensor:
  - platform: wifi_info
    ip_address:
      name: "Curatron IP Address"
      entity_category: diagnostic
    ssid:
      name: "Curatron Connected SSID"
      entity_category: diagnostic
    mac_address:
      name: "Curatron MAC Address"
      entity_category: diagnostic

  - platform: version
    name: "Curatron ESPHome Version"
    entity_category: diagnostic

# Control buttons
button:
  - platform: restart
    name: "Curatron Restart"
    entity_category: config

  - platform: factory_reset
    name: "Curatron Factory Reset"
    entity_category: config

  - platform: safe_mode
    name: "Curatron Safe Mode"
    entity_category: config

# Status LED
status_led:
  pin: GPIO2

# Deep sleep for power saving (optional - disable if always powered)
# deep_sleep:
#   id: deep_sleep_1
#   run_duration: 30s
#   sleep_duration: 5min

# Web server for debugging (optional)
# web_server:
#   port: 80